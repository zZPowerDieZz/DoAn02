// <auto-generated />
using System;
using DoAn.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoAn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240624105737_PhanQuyen")]
    partial class PhanQuyen
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoAn.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DoAn.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Bentley"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            Name = "Lamborghini"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 6,
                            Name = "Maserati"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 7,
                            Name = "Mecesdes"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 8,
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 9,
                            Name = "Aston Martin"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 10,
                            Name = "MCLaren"
                        },
                        new
                        {
                            Id = 11,
                            DisplayOrder = 11,
                            Name = "Bugatti"
                        },
                        new
                        {
                            Id = 12,
                            DisplayOrder = 12,
                            Name = "Koenigsegg"
                        },
                        new
                        {
                            Id = 13,
                            DisplayOrder = 13,
                            Name = "Pagani"
                        });
                });

            modelBuilder.Entity("DoAn.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DoAn.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DoAn.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Porsche Macan ",
                            Price = 135000.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Porsche Panamera Turbo S",
                            Price = 490000.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Porsche 911 Targa 4S",
                            Price = 395000.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Porsche Taycan",
                            Price = 171000.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Porsche 718 Boxster",
                            Price = 159000.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "Bentley Mulsanne",
                            Price = 306000.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Name = "Bentley Continental GT Speed",
                            Price = 257000.0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Name = "Bentley Mulliner Bacalar",
                            Price = 1764000.0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Name = "BMW 330i",
                            Price = 73000.0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Name = "BMW i7",
                            Price = 289000.0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Name = "BMW i8",
                            Price = 281000.0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Name = "BMW X3 xDrive20i Msport",
                            Price = 85000.0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Name = "BMW XM",
                            Price = 441000.0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Name = "Ford Explorer",
                            Price = 98000.0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Name = "Ford Transit",
                            Price = 34000.0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Name = "Ford Territory Titanium X",
                            Price = 39000.0
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            Name = "Lamborghini Aventador SVJ",
                            Price = 2405000.0
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            Name = "Lamborghini Aventador LP700-4",
                            Price = 1043000.0
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            Name = "Lamborghini Urus Performante",
                            Price = 662000.0
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            Name = "Lamborghini Huracan LP580-2",
                            Price = 562000.0
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            Name = "Lamborghini Huracan STO",
                            Price = 305000.0
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            Name = "Maserati Grecale",
                            Price = 169000.0
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            Name = "Maserati Ghibli Hybrid",
                            Price = 240000.0
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            Name = "Maserati MC20",
                            Price = 642000.0
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            Name = "Mercedes AMG A35 4MATIC",
                            Price = 97400.0
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            Name = "Mercedes AMG G63",
                            Price = 471000.0
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 7,
                            Name = "Mercedes Benz EQB",
                            Price = 92000.0
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 8,
                            Name = "Ferrari 812 GTS",
                            Price = 342000.0
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            Name = "Ferrari F8 Tributo",
                            Price = 241000.0
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            Name = "Ferrari Purosangue",
                            Price = 1604000.0
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 9,
                            Name = "Aston Martin Vantage",
                            Price = 600800.0
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 9,
                            Name = "Aston Martin DB11 V8 Coupe",
                            Price = 630000.0
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 9,
                            Name = "Aston Martin DBS Superleggera Volante",
                            Price = 314000.0
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 9,
                            Name = "Aston Martin DBX",
                            Price = 642000.0
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 10,
                            Name = "McLaren 600LT",
                            Price = 242500.0
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 10,
                            Name = "McLaren Senna",
                            Price = 4711200.0
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 10,
                            Name = "McLaren Speedtail",
                            Price = 2100000.0
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 11,
                            Name = "Bugatti La Voiture Noire",
                            Price = 18680000.0
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 11,
                            Name = "Bugatti Centodieci",
                            Price = 9000000.0
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 11,
                            Name = "Bugatti Bolide",
                            Price = 4713600.0
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 12,
                            Name = "Koenigsegg Agera R",
                            Price = 2100000.0
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 12,
                            Name = "Koenigsegg Regera",
                            Price = 5500000.0
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 12,
                            Name = "Koenigsegg Jesko",
                            Price = 2800000.0
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 13,
                            Name = "Pagani Huayra BC Roadster",
                            Price = 3500000.0
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 13,
                            Name = "Pagani Zonda R",
                            Price = 1900000.0
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 13,
                            Name = "Pagani Zonda HP Barchetta",
                            Price = 17500000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DoAn.Models.OrderDetail", b =>
                {
                    b.HasOne("DoAn.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DoAn.Models.Product", b =>
                {
                    b.HasOne("DoAn.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DoAn.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DoAn.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAn.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DoAn.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
